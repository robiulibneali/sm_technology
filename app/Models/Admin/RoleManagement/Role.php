<?php

namespace App\Models\Admin\RoleManagement;

use App\Models\Scopes\Searchable;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Support\Str;

class Role extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = ['title', 'note', 'slug', 'is_default', 'status'];

    protected $searchableFields = ['*'];

    protected static $role;

    protected static function boot()  // better use this method
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($role) {
            if (!empty($role->permissions))
            {
                $role->permissions()->detach();
            }
            if (!empty($role->users))
            {
                $role->users()->detach();
            }
        });
    }

    public static function createOrUpdateRole($request, $id = null)
    {
        if (isset($id))
        {
            self::$role = Role::find($id);
        } else {
            self::$role = new Role();
        }
        self::$role->title              = $request->title;
        self::$role->note               = $request->note;
        self::$role->is_default         = 0;
        self::$role->slug               = str_replace(' ', '-', Str::lower($request->title));
        self::$role->status             = $request->status == 'on' ? 1 : 0;
        self::$role->save();

        self::$role->permissions()->sync($request->permissions);
    }

    public static function deleteRole($id)
    {
        self::$role = Role::find($id);
        self::$role->delete();
    }

    public function permissions()
    {
        return $this->belongsToMany(Permission::class);
    }

    public function users()
    {
        return $this->belongsToMany(User::class);
    }
}
